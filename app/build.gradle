apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "org.sonarqube"
apply plugin: 'jacoco'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.rakha.mvvmexample"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", '"https://api.github.com/"'
        }
        debug {
            buildConfigField "String", "BASE_URL", '"https://api.github.com/"'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.room:room-runtime:2.2.3'
    implementation 'androidx.room:room-rxjava2:2.2.3'
    implementation 'com.google.android.material:material:1.1.0-rc02'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.2.0'
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.loggingInterceptorVersion"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttpVersion"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.github.bumptech.glide:glide:3.8.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.1.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation 'org.mockito:mockito-inline:2.23.0'
    testImplementation "androidx.arch.core:core-testing:2.1.0"
}

//coverage
jacoco {
    toolVersion "0.8.6"
}
def fileFilter = [
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/BR.*',
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*$*$*.*', // Anonymous classes generated by kotlin
        '**/*DataBinder*.*',
        '**/DataBindingTriggerClass*',
        //add libraries
        'android/**/*.*',
        'uk/**/*.*',
        'io/**/*.*',
        //remove what we don't test
        'androidTest/**/*.*',
        'test/**/*.*',
        '**/models/**/*.*',
        '**/mock/**/*.*',
        '**/event/**/*.*',
        '**/**_ViewBinding**',
        '**/*EventType.*',
        '**/**Mocked',
        //ProjectDir
        '**/**Activity*',
        '**/**Fragment*',
        '**/**Module*',
        '**/bumptech/**/*.*',
        '**/utils/**/*.*',
        '**/generated/callback/**/*.*',
        '**/remote/**/*.*',
        '**/local/**/*.*',
        '**/events/**/*.*',
        '**/*Companion*.*',
        '**/*Adapter*.*',
        '**/*ViewPager*.*',
        '**/*ViewHolder*.*',
        '**/*Binding*.*',
        '**/**Result*',
        '**/BaseApplication*',
]

task codeCoverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }


    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree, kotlinDebugTree])
    executionData.from = files('build/jacoco/testDebugUnitTest.exec')
}

task getCoverage(type: Exec, dependsOn: 'codeCoverageReport') {
    group = "Reporting"
    commandLine "open", "$buildDir/reports/jacoco/codeCoverageReport/html/index.html"
}

sonarqube {
    properties {
        property "sonar.projectKey", "zona284_MVVMExample"
        property "sonar.organization", "zona284"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", ["src/test/java"]
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.exclusions", "${fileFilter.join(',')}"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
        property "sonar.junit.reportsPath", "${buildDir}/test-results/testDebugUnitTest"
    }
}